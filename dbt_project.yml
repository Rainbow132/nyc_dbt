
# 为你的项目命名！项目名称只能包含小写字符
# 和下划线。一个好的包名称应该反映您组织的
# 这些模型的名称或预期用途
name: 'homework'
version: '1.0.0'

# 此设置配置 dbt 为此项目使用哪个“配置文件”。
profile: 'homework'

# 这些配置指定 dbt 应在何处查找不同类型的文件。
# 例如，`model-paths` 配置表明该项目中的模型可以是
# 在“models/”目录中找到。您可能不需要更改这些！
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # 要通过 `dbt clean` 删除的目录
  - "target"
  - "dbt_packages"


# 配置模型
# 完整文档：https://docs.getdbt.com/docs/configuring-models

# 在此示例配置中，我们告诉 dbt 构建示例中的所有模型/
# 目录作为视图。这些设置可以在单独的模型中被覆盖
# 使用 `{{ config(...) }}` 宏的文件。
models:
  homework:
    # 配置用+表示，适用于models/example/下的所有文件，这个文件夹通常用于存放示例模型或实验性模型。它可以包含一些用于学习和测试的模型文件，不一定用于生产环境。
    example:
    #模型采用视图表示，即在每次查询时动态生成，而不是创建物理表
      +materialized: view
    #配置staging, 适用于models/staging/下的所有文件，这个文件夹通常用于存放原始数据的模型文件，这些模型文件通常用于数据清洗、数据转换等操作。
    staging:
      +materialized: view
    #配置core，适用于models/core/下的所有文件，这个文件夹通常用于存放最终的数据模型文件，这些模型文件通常用于数据分析、数据可视化等操作。
    core:
      +materialized: view
